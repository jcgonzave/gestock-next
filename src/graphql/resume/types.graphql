extend type Query {
  resumesByFarmMobile(farmId: String!): [Resume]! @authenticated
}

extend type Mutation {
  bulkUploadMobile(
    farmId: String!
    resumes: [ResumeInputMobile]
    events: [EventInputMobile]
  ): UploadMobileResponse @authorized(module: UPLOAD)
  bulkUploadExcel(
    farmId: String!
    resumes: [ResumeInputExcel]
    events: [EventInputExcel]
  ): UploadWebResponse @authorized(module: UPLOAD)
}

type Resume {
  id: String!
  animalCode: String!
  image: String
  breedId: String!
  colorId: String!
  stageId: String!
  genderId: String!
  birthday: String!
  caravan: String
  initialWeight: String!
  name: String
  registeredAt: String!
  events: [Event]
}

type Event {
  id: String!
  ResumeId: String!
  listItem: ListItem!
  numericValue: String
  image: String
  comments: String
  registeredAt: String!
}

input ResumeInputMobile {
  id: String
  animalCode: String!
  breedId: String!
  colorId: String!
  stageId: String!
  genderId: String!
  birthday: String!
  caravan: String
  initialWeight: String!
  name: String
  registeredAt: String!
  modified: String
  isNew: Boolean
  isValid: Boolean
  hasNewEvents: Boolean
}

input ResumeInputExcel {
  animalCode: String!
  breed: String
  color: String
  stage: String
  gender: String
  birthday: String
  caravan: String
  initialWeight: String
  name: String
}

input EventInputMobile {
  animalCode: String!
  listItemId: String!
  numericValue: String
  comments: String
  registeredAt: String!
  isNew: Boolean
  eventId: Float
}

input EventInputExcel {
  animalCode: String!
  list: String
  item: String
  comments: String
}

type UploadMobileResponse {
  message: String!
  status: Int!
  result: [String]
}

type UploadWebResponse {
  invalidData: [InvalidData]!
  status: Int!
  result: Boolean!
}

type InvalidData {
  key: String!
  sheet: Float!
  row: Float!
  columns: [String]!
}
